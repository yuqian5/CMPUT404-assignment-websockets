* Explore using Websockets to make a shared state interactive application
** Description

   Your task is to fill in the blanks and connect your browser to your
   webservice via Websockets. We won't be using XML here. I recommend JSON.

   Your task is to get this shared drawing program to work using Websockets.

   This program allows numerous clients to connect and draw on the
   same surface and share the drawing they have made with anyone who
   is currently on.

   The goal here is for you to understand the very basics of Websockets,
   learn a little about canvas, learn a little bit about the overhead
   of Websockets, learn about JSON and other technologies. Also you'll get
   to learn about the flask micro-framework.

   You should be able to see the difference between using websockets
   and AJAX in this assignment.

** Collaboration
   - You may consult with others but the submission should be your
     own source code.
   - Collaboration must be documented in the README.md file
   - Any external source code must be referenced and documented in
     the README.md file

** User Stories
   - As a web browser user I want to draw on the canvas
   - As a web browser user I want to see others drawing on the canvas
   - As a web browser user I want the system to be responsive to my
     actions (< 100ms)
   - As a web browser user I want to watch as other users draw on the
     canvas
   - As a web service user I want to get access to the world
   - As a web service user I want to post entities that have at least
     'x' and 'y' co-ordinates
   - As a web service user I will probably ping the system a lot to
     get updates.

** Requirements

   - [X] Implement the Websockets Javascript parts in the HTML file static/index.htm
   - [X] Implement the Websockets send/recv part of the webservice
   - [X] Upon update all the clients should recv a websocket update message
   - [X] Use JSON to communicate (no plain text!)
   - [X] The webservice can pass all the tests in freetests.py
   - [-] The webservice can pass all the tests in not-free-tests.py (you only have part of this one, I reserve the right to add tests)
   - [X] The webservice can serve /static/index.html
   - [X] static/index.html displays the current state of the webservice
   - [X] static/index.html responds to clicks within 100ms on average
   - [X] Make static/index.html images look nice

 
** Restrictions
   - [X] Use Python 3.6
   - [X] Must run in the 404 VM (Ubuntu 18.10)
   - [X] License your code properly (use an OSI approved license)
     - Put your name on it!

** Submission Instructions
   - Fork my repository from github
     https://github.com/abramhindle/CMPUT404-assignment-websockets
   - Push your commits to your fork
   - In EClass for this assignment submit a URL to the git
     repository. I would prefer github for the host.
     - Line 1: the git URL
     - Line 2: Your CCID

   - To mark your assignment I should be able to type:
     git clone http://github.com/youruserid/thisassignment.git yourccid
     cd yourccid
     bash runtests.sh

   - Marks will be deducted if I cannot successfully do this.
     
   - Marks will be deducted for using library code that does the assignment

** Marking
   - Excellent 7/7: All tests pass (free and notfree), Meets
     requirements. Looks SIGNIFICANTLY better than what I gave you.
     Runs flawlessly in the browser (latency and synchronization).
   - Good 6/7: All tests pass (free and notfree), Meets
     requirements. Looks better than what I gave you.
     Runs flawlessly in the browser (latency and synchronization).
   - Satisfactory 5/7: All tests pass (free and notfree), meets most
     requirements. Could look like what I gave or perhaps some minor
     browser issues (latency and synchronization).
   - Unsatisfactory 3/7: All tests pass (free and notfree). Clearly
     limited effort. UI looks poor, browser issues such as latency and
     synchronization.
   - Failure 0/7: Any test fails. Browser doesn't work. No
     synchronization in browser. Missing parts. Incomplete. Doesn't use websockets.
